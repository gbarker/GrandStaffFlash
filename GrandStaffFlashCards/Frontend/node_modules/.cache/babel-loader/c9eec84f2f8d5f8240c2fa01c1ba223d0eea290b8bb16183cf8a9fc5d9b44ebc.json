{"ast":null,"code":"import { mapGetters, mapActions } from 'vuex';\nimport GrandStaff from '@/components/GrandStaff.vue';\nexport default {\n  name: 'Practice',\n  components: {\n    GrandStaff\n  },\n  data() {\n    return {\n      noteLetters: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n      selectedLetter: null,\n      selectedAccidental: null,\n      lastAnswerResult: null,\n      lastCorrectAnswer: '',\n      correctAnswers: 0,\n      incorrectAnswers: 0\n    };\n  },\n  computed: {\n    ...mapGetters(['currentDeck', 'currentCard', 'cardHistory', 'isLoading', 'hasError', 'errorMessage']),\n    isAnswerSelected() {\n      return this.selectedLetter !== null && this.selectedAccidental !== null;\n    },\n    accuracy() {\n      const total = this.correctAnswers + this.incorrectAnswers;\n      if (total === 0) return 0;\n      return Math.round(this.correctAnswers / total * 100);\n    }\n  },\n  methods: {\n    ...mapActions(['fetchDeck', 'getNextCard', 'submitAnswer']),\n    async startPractice() {\n      await this.fetchDeck('1'); // Fetch the Grand Staff deck\n      this.getNextCard();\n    },\n    selectLetter(letter) {\n      this.selectedLetter = letter;\n    },\n    selectAccidental(accidental) {\n      this.selectedAccidental = accidental;\n    },\n    async submitAnswer() {\n      if (!this.isAnswerSelected) return;\n      const userAnswer = this.selectedLetter + this.selectedAccidental;\n      const correctAnswer = this.currentCard.note.letter + this.currentCard.note.accidental;\n      const isCorrect = userAnswer === correctAnswer;\n      if (isCorrect) {\n        this.correctAnswers++;\n        this.lastAnswerResult = true;\n      } else {\n        this.incorrectAnswers++;\n        this.lastAnswerResult = false;\n        this.lastCorrectAnswer = correctAnswer;\n      }\n\n      // Submit the answer to the store\n      await this.submitAnswer({\n        cardId: this.currentCard.id,\n        answer: userAnswer,\n        isCorrect\n      });\n\n      // Reset selection for next card\n      this.selectedLetter = null;\n      this.selectedAccidental = null;\n\n      // Clear the result after a delay\n      setTimeout(() => {\n        this.lastAnswerResult = null;\n      }, 3000);\n    }\n  },\n  created() {\n    this.startPractice();\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","GrandStaff","name","components","data","noteLetters","selectedLetter","selectedAccidental","lastAnswerResult","lastCorrectAnswer","correctAnswers","incorrectAnswers","computed","isAnswerSelected","accuracy","total","Math","round","methods","startPractice","fetchDeck","getNextCard","selectLetter","letter","selectAccidental","accidental","submitAnswer","userAnswer","correctAnswer","currentCard","note","isCorrect","cardId","id","answer","setTimeout","created"],"sources":["C:\\Users\\georg\\Documents\\Projects\\Cursor Tutorial\\GrandStaffFlashCards\\Frontend\\src\\views\\Practice.vue"],"sourcesContent":["<template>\n  <div class=\"practice\">\n    <h1 class=\"mb-4\">Practice Grand Staff Notes</h1>\n    \n    <div v-if=\"isLoading\" class=\"text-center my-5\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <p class=\"mt-2\">Loading flash cards...</p>\n    </div>\n    \n    <div v-else-if=\"hasError\" class=\"alert alert-danger\" role=\"alert\">\n      {{ errorMessage }}\n    </div>\n    \n    <div v-else-if=\"!currentCard\" class=\"text-center my-5\">\n      <p>No cards available. Please try again later.</p>\n      <button @click=\"startPractice\" class=\"btn btn-primary\">Retry</button>\n    </div>\n    \n    <div v-else class=\"card-container\">\n      <div class=\"row\">\n        <div class=\"col-md-8 offset-md-2\">\n          <div class=\"card mb-4\">\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\n              <span>Grand Staff Note</span>\n              <div>\n                <span class=\"badge bg-primary me-2\">Key: {{ currentCard.note.keySignature }}</span>\n                <span class=\"badge bg-secondary\">Time: {{ currentCard.note.timeSignature }}</span>\n              </div>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"grand-staff-display\">\n                <!-- Use the GrandStaff component -->\n                <GrandStaff :note=\"currentCard.note\" />\n                \n                <div class=\"answer-section\">\n                  <h5 class=\"mb-3\">Select the correct note:</h5>\n                  \n                  <div class=\"note-buttons mb-4\">\n                    <div class=\"btn-group w-100\" role=\"group\" aria-label=\"Note letters\">\n                      <button \n                        v-for=\"letter in noteLetters\" \n                        :key=\"letter\"\n                        type=\"button\" \n                        class=\"btn btn-outline-primary\"\n                        :class=\"{ active: selectedLetter === letter }\"\n                        @click=\"selectLetter(letter)\">\n                        {{ letter }}\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div class=\"accidental-buttons mb-4\">\n                    <div class=\"btn-group w-100\" role=\"group\" aria-label=\"Accidentals\">\n                      <button \n                        type=\"button\" \n                        class=\"btn btn-outline-secondary\"\n                        :class=\"{ active: selectedAccidental === '' }\"\n                        @click=\"selectAccidental('')\">\n                        Natural (♮)\n                      </button>\n                      <button \n                        type=\"button\" \n                        class=\"btn btn-outline-secondary\"\n                        :class=\"{ active: selectedAccidental === '#' }\"\n                        @click=\"selectAccidental('#')\">\n                        Sharp (♯)\n                      </button>\n                      <button \n                        type=\"button\" \n                        class=\"btn btn-outline-secondary\"\n                        :class=\"{ active: selectedAccidental === 'b' }\"\n                        @click=\"selectAccidental('b')\">\n                        Flat (♭)\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div class=\"submit-answer\">\n                    <button \n                      @click=\"submitAnswer\" \n                      class=\"btn btn-success btn-lg w-100\"\n                      :disabled=\"!isAnswerSelected\">\n                      Submit Answer\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"lastAnswerResult !== null\" class=\"alert\" :class=\"lastAnswerResult ? 'alert-success' : 'alert-danger'\">\n            <strong>{{ lastAnswerResult ? 'Correct!' : 'Incorrect!' }}</strong>\n            <span v-if=\"!lastAnswerResult\">\n              The correct answer was {{ lastCorrectAnswer }}.\n            </span>\n          </div>\n          \n          <div class=\"progress-stats d-flex justify-content-between\">\n            <div>\n              <strong>Cards Viewed:</strong> {{ cardHistory.length }}\n            </div>\n            <div>\n              <strong>Correct:</strong> {{ correctAnswers }}\n            </div>\n            <div>\n              <strong>Incorrect:</strong> {{ incorrectAnswers }}\n            </div>\n            <div>\n              <strong>Accuracy:</strong> {{ accuracy }}%\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport GrandStaff from '@/components/GrandStaff.vue'\n\nexport default {\n  name: 'Practice',\n  components: {\n    GrandStaff\n  },\n  data() {\n    return {\n      noteLetters: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n      selectedLetter: null,\n      selectedAccidental: null,\n      lastAnswerResult: null,\n      lastCorrectAnswer: '',\n      correctAnswers: 0,\n      incorrectAnswers: 0\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'currentDeck',\n      'currentCard',\n      'cardHistory',\n      'isLoading',\n      'hasError',\n      'errorMessage'\n    ]),\n    isAnswerSelected() {\n      return this.selectedLetter !== null && this.selectedAccidental !== null\n    },\n    accuracy() {\n      const total = this.correctAnswers + this.incorrectAnswers\n      if (total === 0) return 0\n      return Math.round((this.correctAnswers / total) * 100)\n    }\n  },\n  methods: {\n    ...mapActions([\n      'fetchDeck',\n      'getNextCard',\n      'submitAnswer'\n    ]),\n    async startPractice() {\n      await this.fetchDeck('1') // Fetch the Grand Staff deck\n      this.getNextCard()\n    },\n    selectLetter(letter) {\n      this.selectedLetter = letter\n    },\n    selectAccidental(accidental) {\n      this.selectedAccidental = accidental\n    },\n    async submitAnswer() {\n      if (!this.isAnswerSelected) return\n      \n      const userAnswer = this.selectedLetter + this.selectedAccidental\n      const correctAnswer = this.currentCard.note.letter + this.currentCard.note.accidental\n      const isCorrect = userAnswer === correctAnswer\n      \n      if (isCorrect) {\n        this.correctAnswers++\n        this.lastAnswerResult = true\n      } else {\n        this.incorrectAnswers++\n        this.lastAnswerResult = false\n        this.lastCorrectAnswer = correctAnswer\n      }\n      \n      // Submit the answer to the store\n      await this.submitAnswer({\n        cardId: this.currentCard.id,\n        answer: userAnswer,\n        isCorrect\n      })\n      \n      // Reset selection for next card\n      this.selectedLetter = null\n      this.selectedAccidental = null\n      \n      // Clear the result after a delay\n      setTimeout(() => {\n        this.lastAnswerResult = null\n      }, 3000)\n    }\n  },\n  created() {\n    this.startPractice()\n  }\n}\n</script>\n\n<style scoped>\n.card-container {\n  max-width: 900px;\n  margin: 0 auto;\n}\n\n.note-buttons .btn,\n.accidental-buttons .btn {\n  flex: 1;\n  padding: 15px 0;\n  font-size: 1.2rem;\n}\n\n.progress-stats {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #f8f9fa;\n  border-radius: 5px;\n}\n</style> "],"mappings":"AAwHA,SAASA,UAAU,EAAEC,UAAS,QAAS,MAAK;AAC5C,OAAOC,UAAS,MAAO,6BAA4B;AAEnD,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAChDC,cAAc,EAAE,IAAI;MACpBC,kBAAkB,EAAE,IAAI;MACxBC,gBAAgB,EAAE,IAAI;MACtBC,iBAAiB,EAAE,EAAE;MACrBC,cAAc,EAAE,CAAC;MACjBC,gBAAgB,EAAE;IACpB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGb,UAAU,CAAC,CACZ,aAAa,EACb,aAAa,EACb,aAAa,EACb,WAAW,EACX,UAAU,EACV,cAAa,CACd,CAAC;IACFc,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACP,cAAa,KAAM,IAAG,IAAK,IAAI,CAACC,kBAAiB,KAAM,IAAG;IACxE,CAAC;IACDO,QAAQA,CAAA,EAAG;MACT,MAAMC,KAAI,GAAI,IAAI,CAACL,cAAa,GAAI,IAAI,CAACC,gBAAe;MACxD,IAAII,KAAI,KAAM,CAAC,EAAE,OAAO;MACxB,OAAOC,IAAI,CAACC,KAAK,CAAE,IAAI,CAACP,cAAa,GAAIK,KAAK,GAAI,GAAG;IACvD;EACF,CAAC;EACDG,OAAO,EAAE;IACP,GAAGlB,UAAU,CAAC,CACZ,WAAW,EACX,aAAa,EACb,cAAa,CACd,CAAC;IACF,MAAMmB,aAAaA,CAAA,EAAG;MACpB,MAAM,IAAI,CAACC,SAAS,CAAC,GAAG,GAAE;MAC1B,IAAI,CAACC,WAAW,CAAC;IACnB,CAAC;IACDC,YAAYA,CAACC,MAAM,EAAE;MACnB,IAAI,CAACjB,cAAa,GAAIiB,MAAK;IAC7B,CAAC;IACDC,gBAAgBA,CAACC,UAAU,EAAE;MAC3B,IAAI,CAAClB,kBAAiB,GAAIkB,UAAS;IACrC,CAAC;IACD,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACb,gBAAgB,EAAE;MAE5B,MAAMc,UAAS,GAAI,IAAI,CAACrB,cAAa,GAAI,IAAI,CAACC,kBAAiB;MAC/D,MAAMqB,aAAY,GAAI,IAAI,CAACC,WAAW,CAACC,IAAI,CAACP,MAAK,GAAI,IAAI,CAACM,WAAW,CAACC,IAAI,CAACL,UAAS;MACpF,MAAMM,SAAQ,GAAIJ,UAAS,KAAMC,aAAY;MAE7C,IAAIG,SAAS,EAAE;QACb,IAAI,CAACrB,cAAc,EAAC;QACpB,IAAI,CAACF,gBAAe,GAAI,IAAG;MAC7B,OAAO;QACL,IAAI,CAACG,gBAAgB,EAAC;QACtB,IAAI,CAACH,gBAAe,GAAI,KAAI;QAC5B,IAAI,CAACC,iBAAgB,GAAImB,aAAY;MACvC;;MAEA;MACA,MAAM,IAAI,CAACF,YAAY,CAAC;QACtBM,MAAM,EAAE,IAAI,CAACH,WAAW,CAACI,EAAE;QAC3BC,MAAM,EAAEP,UAAU;QAClBI;MACF,CAAC;;MAED;MACA,IAAI,CAACzB,cAAa,GAAI,IAAG;MACzB,IAAI,CAACC,kBAAiB,GAAI,IAAG;;MAE7B;MACA4B,UAAU,CAAC,MAAM;QACf,IAAI,CAAC3B,gBAAe,GAAI,IAAG;MAC7B,CAAC,EAAE,IAAI;IACT;EACF,CAAC;EACD4B,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,aAAa,CAAC;EACrB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}