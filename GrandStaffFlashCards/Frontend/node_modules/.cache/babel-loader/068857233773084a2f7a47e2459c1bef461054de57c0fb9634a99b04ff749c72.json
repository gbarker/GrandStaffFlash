{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"grand-staff\"\n};\nconst _hoisted_2 = {\n  ref: \"staffCanvas\",\n  width: \"600\",\n  height: \"300\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","width","height","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["C:\\Users\\georg\\Documents\\Projects\\Cursor Tutorial\\GrandStaffFlashCards\\Frontend\\src\\components\\GrandStaff.vue"],"sourcesContent":["<template>\r\n  <div class=\"grand-staff\">\r\n    <canvas ref=\"staffCanvas\" width=\"600\" height=\"300\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, watch } from 'vue'\r\n\r\nconst props = defineProps({\r\n  note: {\r\n    type: Object,\r\n    required: true,\r\n    validator: (value) => {\r\n      return value.letter && \r\n             typeof value.accidental !== 'undefined' && \r\n             typeof value.octave !== 'undefined' &&\r\n             value.keySignature &&\r\n             value.timeSignature;\r\n    }\r\n  }\r\n})\r\n\r\nconst staffCanvas = ref(null)\r\nconst ctx = ref(null)\r\nconst staffLineSpacing = 10\r\nconst staffX = 50\r\nconst staffWidth = 500\r\nconst trebleStaffY = 80\r\nconst bassStaffY = 200\r\nconst noteRadius = 8\r\n\r\nonMounted(() => {\r\n  ctx.value = staffCanvas.value.getContext('2d')\r\n  drawGrandStaff()\r\n  drawNote()\r\n})\r\n\r\nwatch(() => props.note, () => {\r\n  redraw()\r\n}, { deep: true })\r\n\r\nfunction redraw() {\r\n  ctx.value.clearRect(0, 0, staffCanvas.value.width, staffCanvas.value.height)\r\n  drawGrandStaff()\r\n  drawNote()\r\n}\r\n\r\nfunction drawGrandStaff() {\r\n  // Draw staff lines\r\n  ctx.value.lineWidth = 1\r\n  ctx.value.strokeStyle = '#000'\r\n  \r\n  // Draw treble staff (5 lines)\r\n  for (let i = 0; i < 5; i++) {\r\n    const y = trebleStaffY + i * staffLineSpacing\r\n    ctx.value.beginPath()\r\n    ctx.value.moveTo(staffX, y)\r\n    ctx.value.lineTo(staffX + staffWidth, y)\r\n    ctx.value.stroke()\r\n  }\r\n  \r\n  // Draw bass staff (5 lines)\r\n  for (let i = 0; i < 5; i++) {\r\n    const y = bassStaffY + i * staffLineSpacing\r\n    ctx.value.beginPath()\r\n    ctx.value.moveTo(staffX, y)\r\n    ctx.value.lineTo(staffX + staffWidth, y)\r\n    ctx.value.stroke()\r\n  }\r\n  \r\n  // Draw treble clef (simplified)\r\n  ctx.value.font = '60px serif'\r\n  ctx.value.fillText('𝄞', staffX + 10, trebleStaffY + 40)\r\n  \r\n  // Draw bass clef (simplified)\r\n  ctx.value.font = '40px serif'\r\n  ctx.value.fillText('𝄢', staffX + 10, bassStaffY + 25)\r\n  \r\n  // Draw key signature\r\n  drawKeySignature()\r\n  \r\n  // Draw time signature\r\n  drawTimeSignature()\r\n}\r\n\r\nfunction drawKeySignature() {\r\n  // Simplified key signature display\r\n  const keyX = staffX + 60\r\n  \r\n  ctx.value.font = '16px serif'\r\n  ctx.value.fillStyle = '#000'\r\n  \r\n  if (props.note.keySignature === 'G Major') {\r\n    // Draw F# for G Major\r\n    ctx.value.fillText('♯', keyX, trebleStaffY - 5)\r\n  } else if (props.note.keySignature === 'F Major') {\r\n    // Draw Bb for F Major\r\n    ctx.value.fillText('♭', keyX, trebleStaffY + 15)\r\n  }\r\n  // C Major has no sharps or flats\r\n}\r\n\r\nfunction drawTimeSignature() {\r\n  const timeX = staffX + 100\r\n  \r\n  ctx.value.font = '20px serif'\r\n  ctx.value.fillStyle = '#000'\r\n  \r\n  const [numerator, denominator] = props.note.timeSignature.split('/')\r\n  \r\n  // Draw time signature on both staves\r\n  ctx.value.fillText(numerator, timeX, trebleStaffY + 15)\r\n  ctx.value.fillText(denominator, timeX, trebleStaffY + 35)\r\n  \r\n  ctx.value.fillText(numerator, timeX, bassStaffY + 15)\r\n  ctx.value.fillText(denominator, timeX, bassStaffY + 35)\r\n}\r\n\r\nfunction drawNote() {\r\n  // Calculate note position based on letter and octave\r\n  const noteX = staffX + 250\r\n  let noteY = 0\r\n  \r\n  // Map note letters to positions (simplified)\r\n  const notePositions = {\r\n    'C': 0,\r\n    'D': -1,\r\n    'E': -2,\r\n    'F': -3,\r\n    'G': -4,\r\n    'A': -5,\r\n    'B': -6\r\n  }\r\n  \r\n  // Determine if note is on treble or bass staff\r\n  if (props.note.octave >= 4) {\r\n    // Treble staff (middle C is one ledger line below)\r\n    const basePosition = trebleStaffY + 5 * staffLineSpacing + staffLineSpacing\r\n    const octaveOffset = (4 - props.note.octave) * 7 * staffLineSpacing / 2\r\n    noteY = basePosition + octaveOffset + notePositions[props.note.letter] * staffLineSpacing / 2\r\n  } else {\r\n    // Bass staff (middle C is one ledger line above)\r\n    const basePosition = bassStaffY - staffLineSpacing\r\n    const octaveOffset = (3 - props.note.octave) * 7 * staffLineSpacing / 2\r\n    noteY = basePosition + octaveOffset + notePositions[props.note.letter] * staffLineSpacing / 2\r\n  }\r\n  \r\n  // Draw the note\r\n  ctx.value.beginPath()\r\n  ctx.value.ellipse(noteX, noteY, noteRadius, noteRadius * 0.8, Math.PI / 4, 0, 2 * Math.PI)\r\n  ctx.value.fill()\r\n  \r\n  // Draw stem\r\n  ctx.value.beginPath()\r\n  ctx.value.moveTo(noteX + noteRadius, noteY)\r\n  ctx.value.lineTo(noteX + noteRadius, noteY - 30)\r\n  ctx.value.stroke()\r\n  \r\n  // Draw accidental\r\n  if (props.note.accidental === '#') {\r\n    ctx.value.font = '24px serif'\r\n    ctx.value.fillText('♯', noteX - 25, noteY + 8)\r\n  } else if (props.note.accidental === 'b') {\r\n    ctx.value.font = '24px serif'\r\n    ctx.value.fillText('♭', noteX - 25, noteY + 8)\r\n  }\r\n  \r\n  // Draw ledger lines if needed\r\n  drawLedgerLines(noteX, noteY)\r\n}\r\n\r\nfunction drawLedgerLines(noteX, noteY) {\r\n  ctx.value.lineWidth = 1\r\n  ctx.value.strokeStyle = '#000'\r\n  \r\n  // Ledger lines for treble staff\r\n  if (noteY > trebleStaffY + 5 * staffLineSpacing) {\r\n    for (let y = trebleStaffY + 6 * staffLineSpacing; y <= noteY; y += staffLineSpacing) {\r\n      if ((y - trebleStaffY) % (staffLineSpacing * 2) === 0) {\r\n        ctx.value.beginPath()\r\n        ctx.value.moveTo(noteX - 15, y)\r\n        ctx.value.lineTo(noteX + 15, y)\r\n        ctx.value.stroke()\r\n      }\r\n    }\r\n  } else if (noteY < trebleStaffY) {\r\n    for (let y = trebleStaffY - staffLineSpacing; y >= noteY; y -= staffLineSpacing) {\r\n      if ((trebleStaffY - y) % (staffLineSpacing * 2) === 0) {\r\n        ctx.value.beginPath()\r\n        ctx.value.moveTo(noteX - 15, y)\r\n        ctx.value.lineTo(noteX + 15, y)\r\n        ctx.value.stroke()\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Ledger lines for bass staff\r\n  if (noteY > bassStaffY + 5 * staffLineSpacing) {\r\n    for (let y = bassStaffY + 6 * staffLineSpacing; y <= noteY; y += staffLineSpacing) {\r\n      if ((y - bassStaffY) % (staffLineSpacing * 2) === 0) {\r\n        ctx.value.beginPath()\r\n        ctx.value.moveTo(noteX - 15, y)\r\n        ctx.value.lineTo(noteX + 15, y)\r\n        ctx.value.stroke()\r\n      }\r\n    }\r\n  } else if (noteY < bassStaffY) {\r\n    for (let y = bassStaffY - staffLineSpacing; y >= noteY; y -= staffLineSpacing) {\r\n      if ((bassStaffY - y) % (staffLineSpacing * 2) === 0) {\r\n        ctx.value.beginPath()\r\n        ctx.value.moveTo(noteX - 15, y)\r\n        ctx.value.lineTo(noteX + 15, y)\r\n        ctx.value.stroke()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.grand-staff {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 20px 0;\r\n}\r\n\r\ncanvas {\r\n  border: 1px solid #eee;\r\n  background-color: white;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAa;;EACdC,GAAG,EAAC,aAAa;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;uBAD/CC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAA4D,UAA5DC,UAA4D,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}