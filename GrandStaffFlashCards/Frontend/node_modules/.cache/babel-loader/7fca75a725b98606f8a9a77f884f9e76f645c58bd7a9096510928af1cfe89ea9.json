{"ast":null,"code":"import { ref, computed, onMounted } from 'vue';\nimport { useFlashCardStore } from '../stores/flashCardStore';\nimport GrandStaff from '../components/GrandStaff.vue';\nexport default {\n  __name: 'PracticeView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useFlashCardStore();\n\n    // Local state\n    const noteLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\n    const selectedLetter = ref(null);\n    const selectedAccidental = ref(null);\n    const lastAnswerResult = ref(null);\n    const lastCorrectAnswer = ref('');\n    const correctAnswers = ref(0);\n    const incorrectAnswers = ref(0);\n\n    // Computed properties\n    const currentCard = computed(() => store.currentCard);\n    const cardHistory = computed(() => store.cardHistory);\n    const isLoading = computed(() => store.isLoading);\n    const hasError = computed(() => store.error !== null);\n    const errorMessage = computed(() => store.error);\n    const isAnswerSelected = computed(() => selectedLetter.value !== null && selectedAccidental.value !== null);\n    const accuracy = computed(() => {\n      const total = correctAnswers.value + incorrectAnswers.value;\n      if (total === 0) return 0;\n      return Math.round(correctAnswers.value / total * 100);\n    });\n\n    // Methods\n    async function startPractice() {\n      await store.fetchDeck('1'); // Fetch the Grand Staff deck\n      store.getNextCard();\n    }\n    function selectLetter(letter) {\n      selectedLetter.value = letter;\n    }\n    function selectAccidental(accidental) {\n      selectedAccidental.value = accidental;\n    }\n    async function submitAnswer() {\n      if (!isAnswerSelected.value) return;\n      const userAnswer = selectedLetter.value + selectedAccidental.value;\n      const correctAnswer = currentCard.value.note.letter + currentCard.value.note.accidental;\n      const isCorrect = userAnswer === correctAnswer;\n      if (isCorrect) {\n        correctAnswers.value++;\n        lastAnswerResult.value = true;\n      } else {\n        incorrectAnswers.value++;\n        lastAnswerResult.value = false;\n        lastCorrectAnswer.value = correctAnswer;\n      }\n\n      // Submit the answer to the store\n      await store.submitAnswer({\n        cardId: currentCard.value.id,\n        answer: userAnswer,\n        isCorrect\n      });\n\n      // Reset selection for next card\n      selectedLetter.value = null;\n      selectedAccidental.value = null;\n\n      // Clear the result after a delay\n      setTimeout(() => {\n        lastAnswerResult.value = null;\n      }, 3000);\n    }\n\n    // Lifecycle hooks\n    onMounted(() => {\n      startPractice();\n    });\n    const __returned__ = {\n      store,\n      noteLetters,\n      selectedLetter,\n      selectedAccidental,\n      lastAnswerResult,\n      lastCorrectAnswer,\n      correctAnswers,\n      incorrectAnswers,\n      currentCard,\n      cardHistory,\n      isLoading,\n      hasError,\n      errorMessage,\n      isAnswerSelected,\n      accuracy,\n      startPractice,\n      selectLetter,\n      selectAccidental,\n      submitAnswer,\n      ref,\n      computed,\n      onMounted,\n      get useFlashCardStore() {\n        return useFlashCardStore;\n      },\n      GrandStaff\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useFlashCardStore","GrandStaff","store","noteLetters","selectedLetter","selectedAccidental","lastAnswerResult","lastCorrectAnswer","correctAnswers","incorrectAnswers","currentCard","cardHistory","isLoading","hasError","error","errorMessage","isAnswerSelected","value","accuracy","total","Math","round","startPractice","fetchDeck","getNextCard","selectLetter","letter","selectAccidental","accidental","submitAnswer","userAnswer","correctAnswer","note","isCorrect","cardId","id","answer","setTimeout"],"sources":["C:/Users/georg/Documents/Projects/Cursor Tutorial/GrandStaffFlashCards/Frontend/src/views/PracticeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"practice\">\r\n    <h1 class=\"mb-4\">Practice Grand Staff Notes</h1>\r\n    \r\n    <div v-if=\"isLoading\" class=\"text-center my-5\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <p class=\"mt-2\">Loading flash cards...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"hasError\" class=\"alert alert-danger\" role=\"alert\">\r\n      {{ errorMessage }}\r\n    </div>\r\n    \r\n    <div v-else-if=\"!currentCard\" class=\"text-center my-5\">\r\n      <p>No cards available. Please try again later.</p>\r\n      <button @click=\"startPractice\" class=\"btn btn-primary\">Retry</button>\r\n    </div>\r\n    \r\n    <div v-else class=\"card-container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-8 offset-md-2\">\r\n          <div class=\"card mb-4\">\r\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n              <span>Grand Staff Note</span>\r\n              <div>\r\n                <span class=\"badge bg-primary me-2\">Key: {{ currentCard.note.keySignature }}</span>\r\n                <span class=\"badge bg-secondary\">Time: {{ currentCard.note.timeSignature }}</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"grand-staff-display\">\r\n                <!-- Use the GrandStaff component -->\r\n                <GrandStaff :note=\"currentCard.note\" />\r\n                \r\n                <div class=\"answer-section\">\r\n                  <h5 class=\"mb-3\">Select the correct note:</h5>\r\n                  \r\n                  <div class=\"note-buttons mb-4\">\r\n                    <div class=\"btn-group w-100\" role=\"group\" aria-label=\"Note letters\">\r\n                      <button \r\n                        v-for=\"letter in noteLetters\" \r\n                        :key=\"letter\"\r\n                        type=\"button\" \r\n                        class=\"btn btn-outline-primary\"\r\n                        :class=\"{ active: selectedLetter === letter }\"\r\n                        @click=\"selectLetter(letter)\">\r\n                        {{ letter }}\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"accidental-buttons mb-4\">\r\n                    <div class=\"btn-group w-100\" role=\"group\" aria-label=\"Accidentals\">\r\n                      <button \r\n                        type=\"button\" \r\n                        class=\"btn btn-outline-secondary\"\r\n                        :class=\"{ active: selectedAccidental === '' }\"\r\n                        @click=\"selectAccidental('')\">\r\n                        Natural (♮)\r\n                      </button>\r\n                      <button \r\n                        type=\"button\" \r\n                        class=\"btn btn-outline-secondary\"\r\n                        :class=\"{ active: selectedAccidental === '#' }\"\r\n                        @click=\"selectAccidental('#')\">\r\n                        Sharp (♯)\r\n                      </button>\r\n                      <button \r\n                        type=\"button\" \r\n                        class=\"btn btn-outline-secondary\"\r\n                        :class=\"{ active: selectedAccidental === 'b' }\"\r\n                        @click=\"selectAccidental('b')\">\r\n                        Flat (♭)\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"submit-answer\">\r\n                    <button \r\n                      @click=\"submitAnswer\" \r\n                      class=\"btn btn-success btn-lg w-100\"\r\n                      :disabled=\"!isAnswerSelected\">\r\n                      Submit Answer\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div v-if=\"lastAnswerResult !== null\" class=\"alert\" :class=\"lastAnswerResult ? 'alert-success' : 'alert-danger'\">\r\n            <strong>{{ lastAnswerResult ? 'Correct!' : 'Incorrect!' }}</strong>\r\n            <span v-if=\"!lastAnswerResult\">\r\n              The correct answer was {{ lastCorrectAnswer }}.\r\n            </span>\r\n          </div>\r\n          \r\n          <div class=\"progress-stats d-flex justify-content-between\">\r\n            <div>\r\n              <strong>Cards Viewed:</strong> {{ cardHistory.length }}\r\n            </div>\r\n            <div>\r\n              <strong>Correct:</strong> {{ correctAnswers }}\r\n            </div>\r\n            <div>\r\n              <strong>Incorrect:</strong> {{ incorrectAnswers }}\r\n            </div>\r\n            <div>\r\n              <strong>Accuracy:</strong> {{ accuracy }}%\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { useFlashCardStore } from '../stores/flashCardStore'\r\nimport GrandStaff from '../components/GrandStaff.vue'\r\n\r\nconst store = useFlashCardStore()\r\n\r\n// Local state\r\nconst noteLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\r\nconst selectedLetter = ref(null)\r\nconst selectedAccidental = ref(null)\r\nconst lastAnswerResult = ref(null)\r\nconst lastCorrectAnswer = ref('')\r\nconst correctAnswers = ref(0)\r\nconst incorrectAnswers = ref(0)\r\n\r\n// Computed properties\r\nconst currentCard = computed(() => store.currentCard)\r\nconst cardHistory = computed(() => store.cardHistory)\r\nconst isLoading = computed(() => store.isLoading)\r\nconst hasError = computed(() => store.error !== null)\r\nconst errorMessage = computed(() => store.error)\r\nconst isAnswerSelected = computed(() => selectedLetter.value !== null && selectedAccidental.value !== null)\r\nconst accuracy = computed(() => {\r\n  const total = correctAnswers.value + incorrectAnswers.value\r\n  if (total === 0) return 0\r\n  return Math.round((correctAnswers.value / total) * 100)\r\n})\r\n\r\n// Methods\r\nasync function startPractice() {\r\n  await store.fetchDeck('1') // Fetch the Grand Staff deck\r\n  store.getNextCard()\r\n}\r\n\r\nfunction selectLetter(letter) {\r\n  selectedLetter.value = letter\r\n}\r\n\r\nfunction selectAccidental(accidental) {\r\n  selectedAccidental.value = accidental\r\n}\r\n\r\nasync function submitAnswer() {\r\n  if (!isAnswerSelected.value) return\r\n  \r\n  const userAnswer = selectedLetter.value + selectedAccidental.value\r\n  const correctAnswer = currentCard.value.note.letter + currentCard.value.note.accidental\r\n  const isCorrect = userAnswer === correctAnswer\r\n  \r\n  if (isCorrect) {\r\n    correctAnswers.value++\r\n    lastAnswerResult.value = true\r\n  } else {\r\n    incorrectAnswers.value++\r\n    lastAnswerResult.value = false\r\n    lastCorrectAnswer.value = correctAnswer\r\n  }\r\n  \r\n  // Submit the answer to the store\r\n  await store.submitAnswer({\r\n    cardId: currentCard.value.id,\r\n    answer: userAnswer,\r\n    isCorrect\r\n  })\r\n  \r\n  // Reset selection for next card\r\n  selectedLetter.value = null\r\n  selectedAccidental.value = null\r\n  \r\n  // Clear the result after a delay\r\n  setTimeout(() => {\r\n    lastAnswerResult.value = null\r\n  }, 3000)\r\n}\r\n\r\n// Lifecycle hooks\r\nonMounted(() => {\r\n  startPractice()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.card-container {\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.note-buttons .btn,\r\n.accidental-buttons .btn {\r\n  flex: 1;\r\n  padding: 15px 0;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.progress-stats {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 5px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}